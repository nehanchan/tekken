type Character @aws_api_key @aws_iam @aws_cognito_user_pools {
  character_id: String!
  character_name_en: String!
  character_name_jp: String
  nickname: String
  height: String
  weight: String
  nationality: String
  martial_arts: String
  character_description: String
  moves(filter: ModelMoveFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelMoveConnection
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type MoveCategory @aws_api_key @aws_iam @aws_cognito_user_pools {
  move_category_id: ID!
  move_category: String!
  moves(filter: ModelMoveFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelMoveConnection
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Effect @aws_api_key @aws_iam @aws_cognito_user_pools {
  effectId: ID
  imagePath: String!
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Move @aws_api_key @aws_iam @aws_cognito_user_pools {
  moveId: String!
  characterMoveId: Int
  character_id: String!
  categoryId: ID
  name: String!
  nameKana: String
  command: String
  damage: Int
  startupFrame: Int
  activeFrame: String
  hitFrame: String
  blockFrame: String
  attribute: String
  judgment: String
  effects: [String]
  notes: [String]
  character: Character
  category: MoveCategory
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Post @aws_api_key @aws_iam @aws_cognito_user_pools {
  title: String!
  content: String!
  author: String!
  character_id: String
  likes: Int
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

input AmplifyAIConversationTurnErrorInput {
  errorType: String!
  message: String!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelCharacterConnection @aws_api_key @aws_iam @aws_cognito_user_pools {
  items: [Character]!
  nextToken: String
}

input ModelCharacterFilterInput {
  character_id: ModelStringInput
  character_name_en: ModelStringInput
  character_name_jp: ModelStringInput
  nickname: ModelStringInput
  height: ModelStringInput
  weight: ModelStringInput
  nationality: ModelStringInput
  martial_arts: ModelStringInput
  character_description: ModelStringInput
  id: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelCharacterFilterInput]
  or: [ModelCharacterFilterInput]
  not: ModelCharacterFilterInput
}

type Query {
  getCharacter(id: ID!): Character @aws_api_key @aws_iam @aws_cognito_user_pools
  listCharacters(filter: ModelCharacterFilterInput, limit: Int, nextToken: String): ModelCharacterConnection @aws_api_key @aws_iam @aws_cognito_user_pools
  getMoveCategory(id: ID!): MoveCategory @aws_api_key @aws_iam @aws_cognito_user_pools
  listMoveCategories(filter: ModelMoveCategoryFilterInput, limit: Int, nextToken: String): ModelMoveCategoryConnection @aws_api_key @aws_iam @aws_cognito_user_pools
  getEffect(id: ID!): Effect @aws_api_key @aws_iam @aws_cognito_user_pools
  listEffects(filter: ModelEffectFilterInput, limit: Int, nextToken: String): ModelEffectConnection @aws_api_key @aws_iam @aws_cognito_user_pools
  getMove(id: ID!): Move @aws_api_key @aws_iam @aws_cognito_user_pools
  listMoves(filter: ModelMoveFilterInput, limit: Int, nextToken: String): ModelMoveConnection @aws_api_key @aws_iam @aws_cognito_user_pools
  getPost(id: ID!): Post @aws_api_key @aws_iam @aws_cognito_user_pools
  listPosts(filter: ModelPostFilterInput, limit: Int, nextToken: String): ModelPostConnection @aws_api_key @aws_iam @aws_cognito_user_pools
}

input ModelCharacterConditionInput {
  character_id: ModelStringInput
  character_name_en: ModelStringInput
  character_name_jp: ModelStringInput
  nickname: ModelStringInput
  height: ModelStringInput
  weight: ModelStringInput
  nationality: ModelStringInput
  martial_arts: ModelStringInput
  character_description: ModelStringInput
  and: [ModelCharacterConditionInput]
  or: [ModelCharacterConditionInput]
  not: ModelCharacterConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateCharacterInput {
  character_id: String!
  character_name_en: String!
  character_name_jp: String
  nickname: String
  height: String
  weight: String
  nationality: String
  martial_arts: String
  character_description: String
  id: ID
}

input UpdateCharacterInput {
  character_id: String
  character_name_en: String
  character_name_jp: String
  nickname: String
  height: String
  weight: String
  nationality: String
  martial_arts: String
  character_description: String
  id: ID!
}

input DeleteCharacterInput {
  id: ID!
}

type Mutation {
  createCharacter(input: CreateCharacterInput!, condition: ModelCharacterConditionInput): Character @aws_api_key @aws_iam @aws_cognito_user_pools
  updateCharacter(input: UpdateCharacterInput!, condition: ModelCharacterConditionInput): Character @aws_api_key @aws_iam @aws_cognito_user_pools
  deleteCharacter(input: DeleteCharacterInput!, condition: ModelCharacterConditionInput): Character @aws_api_key @aws_iam @aws_cognito_user_pools
  createMoveCategory(input: CreateMoveCategoryInput!, condition: ModelMoveCategoryConditionInput): MoveCategory @aws_api_key @aws_iam @aws_cognito_user_pools
  updateMoveCategory(input: UpdateMoveCategoryInput!, condition: ModelMoveCategoryConditionInput): MoveCategory @aws_api_key @aws_iam @aws_cognito_user_pools
  deleteMoveCategory(input: DeleteMoveCategoryInput!, condition: ModelMoveCategoryConditionInput): MoveCategory @aws_api_key @aws_iam @aws_cognito_user_pools
  createEffect(input: CreateEffectInput!, condition: ModelEffectConditionInput): Effect @aws_api_key @aws_iam @aws_cognito_user_pools
  updateEffect(input: UpdateEffectInput!, condition: ModelEffectConditionInput): Effect @aws_api_key @aws_iam @aws_cognito_user_pools
  deleteEffect(input: DeleteEffectInput!, condition: ModelEffectConditionInput): Effect @aws_api_key @aws_iam @aws_cognito_user_pools
  createMove(input: CreateMoveInput!, condition: ModelMoveConditionInput): Move @aws_api_key @aws_iam @aws_cognito_user_pools
  updateMove(input: UpdateMoveInput!, condition: ModelMoveConditionInput): Move @aws_api_key @aws_iam @aws_cognito_user_pools
  deleteMove(input: DeleteMoveInput!, condition: ModelMoveConditionInput): Move @aws_api_key @aws_iam @aws_cognito_user_pools
  createPost(input: CreatePostInput!, condition: ModelPostConditionInput): Post @aws_api_key @aws_iam @aws_cognito_user_pools
  updatePost(input: UpdatePostInput!, condition: ModelPostConditionInput): Post @aws_api_key @aws_iam @aws_cognito_user_pools
  deletePost(input: DeletePostInput!, condition: ModelPostConditionInput): Post @aws_api_key @aws_iam @aws_cognito_user_pools
}

input ModelSubscriptionCharacterFilterInput {
  character_id: ModelSubscriptionStringInput
  character_name_en: ModelSubscriptionStringInput
  character_name_jp: ModelSubscriptionStringInput
  nickname: ModelSubscriptionStringInput
  height: ModelSubscriptionStringInput
  weight: ModelSubscriptionStringInput
  nationality: ModelSubscriptionStringInput
  martial_arts: ModelSubscriptionStringInput
  character_description: ModelSubscriptionStringInput
  id: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionCharacterFilterInput]
  or: [ModelSubscriptionCharacterFilterInput]
}

type Subscription {
  onCreateCharacter(filter: ModelSubscriptionCharacterFilterInput): Character @aws_subscribe(mutations: ["createCharacter"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onUpdateCharacter(filter: ModelSubscriptionCharacterFilterInput): Character @aws_subscribe(mutations: ["updateCharacter"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onDeleteCharacter(filter: ModelSubscriptionCharacterFilterInput): Character @aws_subscribe(mutations: ["deleteCharacter"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onCreateMoveCategory(filter: ModelSubscriptionMoveCategoryFilterInput): MoveCategory @aws_subscribe(mutations: ["createMoveCategory"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onUpdateMoveCategory(filter: ModelSubscriptionMoveCategoryFilterInput): MoveCategory @aws_subscribe(mutations: ["updateMoveCategory"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onDeleteMoveCategory(filter: ModelSubscriptionMoveCategoryFilterInput): MoveCategory @aws_subscribe(mutations: ["deleteMoveCategory"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onCreateEffect(filter: ModelSubscriptionEffectFilterInput): Effect @aws_subscribe(mutations: ["createEffect"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onUpdateEffect(filter: ModelSubscriptionEffectFilterInput): Effect @aws_subscribe(mutations: ["updateEffect"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onDeleteEffect(filter: ModelSubscriptionEffectFilterInput): Effect @aws_subscribe(mutations: ["deleteEffect"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onCreateMove(filter: ModelSubscriptionMoveFilterInput): Move @aws_subscribe(mutations: ["createMove"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onUpdateMove(filter: ModelSubscriptionMoveFilterInput): Move @aws_subscribe(mutations: ["updateMove"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onDeleteMove(filter: ModelSubscriptionMoveFilterInput): Move @aws_subscribe(mutations: ["deleteMove"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onCreatePost(filter: ModelSubscriptionPostFilterInput, owner: String): Post @aws_subscribe(mutations: ["createPost"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onUpdatePost(filter: ModelSubscriptionPostFilterInput, owner: String): Post @aws_subscribe(mutations: ["updatePost"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onDeletePost(filter: ModelSubscriptionPostFilterInput, owner: String): Post @aws_subscribe(mutations: ["deletePost"]) @aws_api_key @aws_iam @aws_cognito_user_pools
}

type ModelMoveCategoryConnection @aws_api_key @aws_iam @aws_cognito_user_pools {
  items: [MoveCategory]!
  nextToken: String
}

input ModelMoveCategoryFilterInput {
  move_category_id: ModelIDInput
  move_category: ModelStringInput
  id: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelMoveCategoryFilterInput]
  or: [ModelMoveCategoryFilterInput]
  not: ModelMoveCategoryFilterInput
}

input ModelMoveCategoryConditionInput {
  move_category_id: ModelIDInput
  move_category: ModelStringInput
  and: [ModelMoveCategoryConditionInput]
  or: [ModelMoveCategoryConditionInput]
  not: ModelMoveCategoryConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateMoveCategoryInput {
  move_category_id: ID!
  move_category: String!
  id: ID
}

input UpdateMoveCategoryInput {
  move_category_id: ID
  move_category: String
  id: ID!
}

input DeleteMoveCategoryInput {
  id: ID!
}

input ModelSubscriptionMoveCategoryFilterInput {
  move_category_id: ModelSubscriptionIDInput
  move_category: ModelSubscriptionStringInput
  id: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionMoveCategoryFilterInput]
  or: [ModelSubscriptionMoveCategoryFilterInput]
}

type ModelEffectConnection @aws_api_key @aws_iam @aws_cognito_user_pools {
  items: [Effect]!
  nextToken: String
}

input ModelEffectFilterInput {
  effectId: ModelIDInput
  imagePath: ModelStringInput
  id: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelEffectFilterInput]
  or: [ModelEffectFilterInput]
  not: ModelEffectFilterInput
}

input ModelEffectConditionInput {
  effectId: ModelIDInput
  imagePath: ModelStringInput
  and: [ModelEffectConditionInput]
  or: [ModelEffectConditionInput]
  not: ModelEffectConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateEffectInput {
  effectId: ID
  imagePath: String!
  id: ID
}

input UpdateEffectInput {
  effectId: ID
  imagePath: String
  id: ID!
}

input DeleteEffectInput {
  id: ID!
}

input ModelSubscriptionEffectFilterInput {
  effectId: ModelSubscriptionIDInput
  imagePath: ModelSubscriptionStringInput
  id: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionEffectFilterInput]
  or: [ModelSubscriptionEffectFilterInput]
}

type ModelMoveConnection @aws_api_key @aws_iam @aws_cognito_user_pools {
  items: [Move]!
  nextToken: String
}

input ModelMoveFilterInput {
  moveId: ModelStringInput
  characterMoveId: ModelIntInput
  character_id: ModelStringInput
  categoryId: ModelIDInput
  name: ModelStringInput
  nameKana: ModelStringInput
  command: ModelStringInput
  damage: ModelIntInput
  startupFrame: ModelIntInput
  activeFrame: ModelStringInput
  hitFrame: ModelStringInput
  blockFrame: ModelStringInput
  attribute: ModelStringInput
  judgment: ModelStringInput
  effects: ModelStringInput
  notes: ModelStringInput
  id: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelMoveFilterInput]
  or: [ModelMoveFilterInput]
  not: ModelMoveFilterInput
}

input ModelMoveConditionInput {
  moveId: ModelStringInput
  characterMoveId: ModelIntInput
  character_id: ModelStringInput
  categoryId: ModelIDInput
  name: ModelStringInput
  nameKana: ModelStringInput
  command: ModelStringInput
  damage: ModelIntInput
  startupFrame: ModelIntInput
  activeFrame: ModelStringInput
  hitFrame: ModelStringInput
  blockFrame: ModelStringInput
  attribute: ModelStringInput
  judgment: ModelStringInput
  effects: ModelStringInput
  notes: ModelStringInput
  and: [ModelMoveConditionInput]
  or: [ModelMoveConditionInput]
  not: ModelMoveConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateMoveInput {
  moveId: String!
  characterMoveId: Int
  character_id: String!
  categoryId: ID
  name: String!
  nameKana: String
  command: String
  damage: Int
  startupFrame: Int
  activeFrame: String
  hitFrame: String
  blockFrame: String
  attribute: String
  judgment: String
  effects: [String]
  notes: [String]
  id: ID
}

input UpdateMoveInput {
  moveId: String
  characterMoveId: Int
  character_id: String
  categoryId: ID
  name: String
  nameKana: String
  command: String
  damage: Int
  startupFrame: Int
  activeFrame: String
  hitFrame: String
  blockFrame: String
  attribute: String
  judgment: String
  effects: [String]
  notes: [String]
  id: ID!
}

input DeleteMoveInput {
  id: ID!
}

input ModelSubscriptionMoveFilterInput {
  moveId: ModelSubscriptionStringInput
  characterMoveId: ModelSubscriptionIntInput
  character_id: ModelSubscriptionStringInput
  categoryId: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  nameKana: ModelSubscriptionStringInput
  command: ModelSubscriptionStringInput
  damage: ModelSubscriptionIntInput
  startupFrame: ModelSubscriptionIntInput
  activeFrame: ModelSubscriptionStringInput
  hitFrame: ModelSubscriptionStringInput
  blockFrame: ModelSubscriptionStringInput
  attribute: ModelSubscriptionStringInput
  judgment: ModelSubscriptionStringInput
  effects: ModelSubscriptionStringInput
  notes: ModelSubscriptionStringInput
  id: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionMoveFilterInput]
  or: [ModelSubscriptionMoveFilterInput]
}

type ModelPostConnection @aws_api_key @aws_iam @aws_cognito_user_pools {
  items: [Post]!
  nextToken: String
}

input ModelPostFilterInput {
  title: ModelStringInput
  content: ModelStringInput
  author: ModelStringInput
  character_id: ModelStringInput
  likes: ModelIntInput
  id: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelPostFilterInput]
  or: [ModelPostFilterInput]
  not: ModelPostFilterInput
  owner: ModelStringInput
}

input ModelPostConditionInput {
  title: ModelStringInput
  content: ModelStringInput
  author: ModelStringInput
  character_id: ModelStringInput
  likes: ModelIntInput
  and: [ModelPostConditionInput]
  or: [ModelPostConditionInput]
  not: ModelPostConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  owner: ModelStringInput
}

input CreatePostInput {
  title: String!
  content: String!
  author: String!
  character_id: String
  likes: Int
  id: ID
}

input UpdatePostInput {
  title: String
  content: String
  author: String
  character_id: String
  likes: Int
  id: ID!
}

input DeletePostInput {
  id: ID!
}

input ModelSubscriptionPostFilterInput {
  title: ModelSubscriptionStringInput
  content: ModelSubscriptionStringInput
  author: ModelSubscriptionStringInput
  character_id: ModelSubscriptionStringInput
  likes: ModelSubscriptionIntInput
  id: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionPostFilterInput]
  or: [ModelSubscriptionPostFilterInput]
  owner: ModelStringInput
}
